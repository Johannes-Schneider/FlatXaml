<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:view="clr-namespace:FlatXaml.View"
                    xmlns:style="clr-namespace:FlatXaml.Style"
                    xmlns:theme="clr-namespace:FlatXaml.Theme"
                    xmlns:converter="clr-namespace:FlatXaml.Converter">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/FlatXaml;component/Style/FlatButtonStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type view:FlatIconButton}" x:Key="{x:Static style:FlatStyleKeys.IconButton}" BasedOn="{StaticResource {x:Static style:FlatStyleKeys.Button}}">
        <Setter Property="IconSize" Value="18" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type view:FlatIconButton}">
                    <ControlTemplate.Resources>
                        <converter:IsNotNullConverter x:Key="IsNotNullConverter" />
                    </ControlTemplate.Resources>

                    <Border x:Name="Border"
                            SnapsToDevicePixels="True"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"
                            BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}">

                        <view:FlatIcon x:Name="Icon"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Icon}"
                                       Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}"
                                       Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconSize}"
                                       Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconSize}" />
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- Hovered -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BackgroundWhenHovered}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrushWhenHovered}" />
                            <Setter TargetName="Icon" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ForegroundWhenHovered}" />
                        </Trigger>
                        <!-- /Hovered -->

                        <!-- Pressed -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=BackgroundWhenPressed}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=BorderBrushWhenPressed}" />
                            <Setter TargetName="Icon" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ForegroundWhenPressed}" />
                        </Trigger>
                        <!-- /Pressed -->

                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=BackgroundWhenDisabled}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=BorderBrushWhenDisabled}" />
                            <Setter TargetName="Icon" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ForegroundWhenDisabled}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IconWhenDisabled, Converter={StaticResource IsNotNullConverter}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="Icon" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconWhenDisabled}" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <!-- /Disabled -->

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>