<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:view="clr-namespace:FlatXaml.View"
                    xmlns:style="clr-namespace:FlatXaml.Style"
                    xmlns:theme="clr-namespace:FlatXaml.Theme"
                    xmlns:icon="clr-namespace:FlatXaml.Icon"
                    xmlns:converter="clr-namespace:FlatXaml.Converter">

    <Style TargetType="{x:Type view:FlatIconCheckBox}" x:Key="{x:Static style:FlatStyleKeys.IconCheckBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />

        <Setter Property="IconSize" Value="16" />

        <Setter Property="BackgroundWhenNotChecked" Value="{DynamicResource {x:Static theme:FlatThemeKeys.ForegroundRegular}}" />
        <Setter Property="IconBackgroundWhenNotChecked" Value="{DynamicResource {x:Static theme:FlatThemeKeys.BackgroundRegular}}" />
        <Setter Property="IconForegroundWhenNotChecked" Value="{DynamicResource {x:Static theme:FlatThemeKeys.ForegroundRegular}}" />
        <Setter Property="IconWhenNotChecked" Value="{DynamicResource {x:Static icon:FlatIconKeys.Cross}}" />

        <Setter Property="BackgroundWhenChecked" Value="{DynamicResource {x:Static theme:FlatThemeKeys.PositiveRegular}}" />
        <Setter Property="IconBackgroundWhenChecked" Value="{DynamicResource {x:Static theme:FlatThemeKeys.BackgroundRegular}}" />
        <Setter Property="IconForegroundWhenChecked" Value="{DynamicResource {x:Static theme:FlatThemeKeys.PositiveRegular}}" />
        <Setter Property="IconWhenChecked" Value="{DynamicResource {x:Static icon:FlatIconKeys.Check}}" />

        <Setter Property="BackgroundWhenDisabled" Value="{DynamicResource {x:Static theme:FlatThemeKeys.ForegroundDisabled}}" />
        <Setter Property="IconBackgroundWhenDisabled" Value="{DynamicResource {x:Static theme:FlatThemeKeys.BackgroundRegular}}" />
        <Setter Property="IconForegroundWhenDisabled" Value="{DynamicResource {x:Static theme:FlatThemeKeys.ForegroundDisabled}}" />

        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type view:FlatIconCheckBox}">

                    <ControlTemplate.Resources>
                        <converter:MultiplyDoubleConverter x:Key="HalfOf"
                                                           Factor="0.5" />
                        <converter:MultiplyDoubleConverter x:Key="ButtonWidthConverter"
                                                           Factor="0.45" />
                        <converter:BoolToVisibilityConverter x:Key="TrueToVisible"
                                                             FalseValue="Collapsed"
                                                             TrueValue="Visible" />
                        <converter:BoolToVisibilityConverter x:Key="FalseToVisible"
                                                             FalseValue="Visible"
                                                             TrueValue="Collapsed" />
                    </ControlTemplate.Resources>

                    <Border x:Name="Border"
                            Width="44"
                            Height="22"
                            HorizontalAlignment="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalAlignment}"
                            VerticalAlignment="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VerticalAlignment}"
                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BackgroundWhenNotChecked}"
                            BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"
                            BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness}"
                            CornerRadius="11">

                        <Grid>
                            <Border x:Name="IconBackgroundNotChecked"
                                    Width="18"
                                    Height="18"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    CornerRadius="9"
                                    Margin="2"
                                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconBackgroundWhenNotChecked}"
                                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, Converter={StaticResource FalseToVisible}}">

                                <view:FlatIcon x:Name="IconNotChecked"
                                               Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconSize}"
                                               Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconSize}"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconWhenNotChecked}"
                                               Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconForegroundWhenNotChecked}" />

                            </Border>

                            <Border x:Name="IconBackgroundChecked"
                                    Width="18"
                                    Height="18"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center"
                                    CornerRadius="9"
                                    Margin="2"
                                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconBackgroundWhenChecked}"
                                    Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, Converter={StaticResource TrueToVisible}}">

                                <view:FlatIcon x:Name="IconChecked"
                                               Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconSize}"
                                               Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconSize}"
                                               HorizontalAlignment="Center"
                                               VerticalAlignment="Center"
                                               Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconWhenChecked}"
                                               Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconForegroundWhenChecked}" />

                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BackgroundWhenChecked}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BackgroundWhenDisabled}" />
                        </Trigger>

                        <!-- Checked && !IsEnabled -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="IconBackgroundChecked" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconBackgroundWhenDisabled}" />
                            <Setter TargetName="IconChecked" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconForegroundWhenDisabled}" />
                        </MultiDataTrigger>
                        <!-- /Checked && !IsEnabled -->

                        <!-- !Checked && !IsEnabled -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsChecked}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="IconBackgroundNotChecked" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconBackgroundWhenDisabled}" />
                            <Setter TargetName="IconNotChecked" Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconForegroundWhenDisabled}" />
                        </MultiDataTrigger>
                        <!-- /Checked && !IsEnabled -->

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>